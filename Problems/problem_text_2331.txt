Given a circularly sorted integer array, find the total number of times the array is rotated. Assume there are no duplicates in the array, and the rotation is in the anti-clockwise direction.

Example: 


Input: nums = [8, 9, 10, 2, 5, 6]
Output: The array is rotated 3 times


Input: nums = [2, 5, 6, 8, 9, 10]
Output: The array is rotated 0 times


Approach-1: 

If we carefully analyze the problem, we can see that the total number of rotations is equal to the total number of elements before the minimum element, or the index of the minimum element.
A simple solution would be to run a linear search on the array and find the minimum element index. The problem with this approach is that its worst-case time complexity is O(n), where n is the size of the input. This solution also does not take advantage of the fact that the input is circularly sorted.