1425. Constrained Subsequence SumHard78934Add to ListShareGiven an integer array nums and an integer k, return the maximum sum of a non-empty subsequence of that array such that for every two consecutive integers in the subsequence, nums[i] and nums[j], where i < j, the condition j - i <= k is satisfied.
A subsequence of an array is obtained by deleting some number of elements (can be zero) from the array, leaving the remaining elements in their original order.

Example 1:
Input: nums = [10,2,-10,5,20], k = 2
Output: 37
Explanation: The subsequence is [10, 2, 5, 20].

Example 2:
Input: nums = [-1,-2,-3], k = 1
Output: -1
Explanation: The subsequence must be non-empty, so we choose the largest number.

Example 3:
Input: nums = [10,-2,-10,-5,20], k = 2
Output: 23
Explanation: The subsequence is [10, -2, -5, 20].


Constraints:

1 <= k <= nums.length <= 105
-104 <= nums[i] <= 104

Accepted18.4KSubmissions39.4KSeen this question in a real interview before?YesNoCompaniesRelated TopicsArrayDynamic ProgrammingQueueSliding WindowHeap (Priority Queue)Monotonic QueueShow Hint 1Use dynamic programming.Show Hint 2Let dp[i] be the solution for the prefix of the array that ends at index i, if the element at index i is in the subsequence.Show Hint 3dp[i] = nums[i] + max(0, dp[i-k], dp[i-k+1], ..., dp[i-1])Show Hint 4Use a heap with the sliding window technique to optimize the dp.