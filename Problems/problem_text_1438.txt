676. Implement Magic DictionaryMedium1012179Add to ListShareDesign a data structure that is initialized with a list of different words. Provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure.
Implement theMagicDictionaryclass:

MagicDictionary()Initializes the object.
void buildDict(String[]dictionary)Sets the data structurewith an array of distinct strings dictionary.
bool search(String searchWord) Returns true if you can change exactly one character in searchWord to match any string in the data structure, otherwise returns false.


Example 1:
Input
["MagicDictionary", "buildDict", "search", "search", "search", "search"]
[[], [["hello", "leetcode"]], ["hello"], ["hhllo"], ["hell"], ["leetcoded"]]
Output
[null, null, false, true, false, false]

Explanation
MagicDictionary magicDictionary = new MagicDictionary();
magicDictionary.buildDict(["hello", "leetcode"]);
magicDictionary.search("hello"); // return False
magicDictionary.search("hhllo"); // We can change the second 'h' to 'e' to match "hello" so we return True
magicDictionary.search("hell"); // return False
magicDictionary.search("leetcoded"); // return False


Constraints:

1 <=dictionary.length <= 100
1 <=dictionary[i].length <= 100
dictionary[i] consists of only lower-case English letters.
All the strings indictionaryare distinct.
1 <=searchWord.length <= 100
searchWordconsists of only lower-case English letters.
buildDictwill be called only once before search.
At most 100 calls will be made to search.

Accepted63.3KSubmissions111.8KSeen this question in a real interview before?YesNoCompaniesRelated TopicsHash TableStringDesignTrieSimilar QuestionsImplement Trie (Prefix Tree)MediumLongest Word in DictionaryMedium