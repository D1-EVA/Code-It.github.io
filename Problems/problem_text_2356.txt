Given an unlimited supply of coins of given denominations, find the total number of distinct ways to get the desired change.

Example: 


Input: S = { 1, 3, 5, 7 }, target = 8

The total number of ways is 6

{ 1, 7 }
{ 3, 5 }
{ 1, 1, 3, 3 }
{ 1, 1, 1, 5 }
{ 1, 1, 1, 1, 1, 3 }
{ 1, 1, 1, 1, 1, 1, 1, 1 }


Input: S = { 1, 2, 3 }, target = 4

The total number of ways is 4

{ 1, 3 }
{ 2, 2 }
{ 1, 1, 2 }
{ 1, 1, 1, 1 }


Approach-1: 

The idea is to use recursion to solve this problem. We recur to see if the total can be reached by choosing the coin or not for each coin of given denominations. If choosing the current coin results in the solution, update the total number of ways.Following is the C++, Java, and Python implementation of the idea:

Approach 2


There is an issue with the above solution. The above solution doesnt always return distinct sets. For example, for set {1, 2, 3}, it returns 7 as some ways are permutations of each other, as shown below:

Approach 3


The problem has an optimal substructure as the problem can be broken down into smaller subproblems, which can further be broken down into yet smaller subproblems, and so on. The problem also clearly exhibits overlapping subproblems, so we will end up solving the same subproblem over and over again. The repeated subproblems can be seen by drawing a recursion tree for higher values of the desired change. We know that problems with optimal substructure and overlapping subproblems can be solved using dynamic programming where the subproblem solutions are memoized rather than computed and again.

Approach 4


We can even write a bottom-up version of the above memoized solution. The following code shows how to implement this in C, Java, and Python:

Approach 5

