Given an integer array, count the total number of strictly increasing subarrays in it.

Example: 


Input: A[] = { 1, 2, 4, 4, 5}

Output: The total number of strictly increasing subarrays is 4

{ 1, 2 }, { 1, 2, 4 }, { 2, 4 }, { 4, 5 }


Input: A[] = { 1, 3, 2 }

Output: The total number of strictly increasing subarrays is 1

{1, 3}


Input: A[] = { 5, 4, 3, 2, 1 }

Output: The total number of strictly increasing subarrays is 0


Approach-1: 

Please note that the problem specifically targets subarrays that are contiguous (i.e., occupy consecutive positions) and inherently maintains the order of elements. A strictly increasing subarray has a size of at least 2.
A naive solution would be to generate all possible subarrays and check if each subarray is strictly increasing or not. The time complexity of this approach is O(n3) since there are n2 subarrays in an array of size n, and time spent on each subarray would be O(n).

Approach 2

