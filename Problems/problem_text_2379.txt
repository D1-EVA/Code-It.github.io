This post will discuss a few related problems related to unsetting the rightmost set bit of a number.

Example: 


00010100&(n = 20)
00010011(n-1 = 19)
~~~~~~~~
00010000

0000000000&(n = 0, no rightmost bit)
1111111111(n-1 = -1)
~~~~~~~~~~~
0000000000
DownloadRun Code


Approach-1: 

The expression n & (n-1) will turn off the rightmost set bit of a number n. The expression n-1 will have all the bits flipped after the rightmost set bit of n (including the rightmost set bit). So, n & (n-1) will result in the last bit flipped of n. Consider,
00010100&(n = 20)
00010011(n-1 = 19)
~~~~~~~~
00010000

0000000000&(n = 0, no rightmost bit)
1111111111(n-1 = -1)
~~~~~~~~~~~
0000000000
DownloadRun Code


Approach 2

The idea is to negate n and perform bitwise AND operation with itself, i.e., n & -n. Then the position of the rightmost set bit in n will be the position of the only set bit in the result. We can also use this hack for problem 1. If (n & -n) == n, then the positive integer n is a power of 2.

Approach 3

The idea is to unset the rightmost bit of the number n and check if it becomes 0 or not. If it is non-zero, we know that there is another set bit present, and we have invalid input. If it becomes 0, then we can find the position of the only set bit by processing every bit of n one by one or directly using log2(n) + 1.

Approach 4

Parity refers to the total number of 1s in a binary number. The odd parity(1) means an odd number of 1s, and even parity(0) means an even number of 1s. Parity bits are often used as a simple means of error detection as digital data is transmitted and received.

Approach 5

Following is the C++, Java, and Python program that demonstrates it: