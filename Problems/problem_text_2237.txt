Given an integer array, find a contiguous subarray within it that has the largest sum.

Example: 


Input: {-2, 1, -3, 4, -1, 2, 1, -5, 4}

Output: Subarray with the largest sum is {4, -1, 2, 1} with sum 6.


Approach-1: 

The problem differs from the problem of finding the maximum sum subsequence. Unlike subsequences, subarrays are required to occupy consecutive positions within the original array.
We can easily solve this problem in linear time using Kadanes algorithm. The idea is to maintain a maximum (positive-sum) subarray ending at each index of the given array. This subarray is either empty (in which case its sum is zero) or consists of one more element than the maximum subarray ending at the previous index.

Approach 2


The above code doesnt handle the case when all the array elements are negative. If the array contains all negative values, the answer is the maximum element. We can easily place this check before continuing to the algorithm. The implementation can be seen below in C++, Java, and Python:

Approach 3

