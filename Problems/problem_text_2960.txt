Given a string, find all lexicographically next permutations of it.

Approach-1: 


A simple solution would be to use std::next_permutation that generates the next greater lexicographic permutation of a string. If the function can determine the next higher permutation, it rearranges the elements and returns true. If that was not possible (because it is already at the largest possible permutation), it rearranges the elements according to the first permutation and returns false.The implementation can be seen below in C++:

Approach 2


Find the largest index i such that str[i-1] is less than str[i].
Return false if i is the first index of the string, meaning that we are already at the highest possible permutation, i.e., the string is sorted in descending order. If i is not the first index of the string, then substring str[in) is sorted in descending order, i.e. str[i-1] < str[i] >= str[i+1] >= str[i+2] >=  >= str[n-1].
Find the highest index j to the right of index i such that str[j] is greater than str[i-1] and swap the character at index i-1 with index j.
Reverse substring str[in) and return true.
