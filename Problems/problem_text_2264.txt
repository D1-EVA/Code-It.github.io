Given a sorted array of distinct positive integers, print all triplets that forms an arithmetic progression with an integral common difference.

Example: 


Input: A[] = { 5, 8, 9, 11, 12, 15 }

Output:
5 8 11
9 12 15


Input: A[] = { 1, 3, 5, 6, 8, 9, 15 }

Output:
1 3 5
1 5 9
3 6 9
1 8 15
3 9 15


Approach-1: 

The idea is to consider every element as the middle element of arithmetic progression, starting from the second element and searching the other two arithmetic triplet elements. For an element A[j] to be middle of arithmetic progression, there exist two elements A[i] and A[k] such that (A[j] - A[i] = A[k] - A[j]) or (A[i] + A[k] == 2  A[j]), where (0 <= i < j < k <= n-1).Following is the C, Java, and Python program that demonstrates it: