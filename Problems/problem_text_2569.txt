Given a rod of length n and a list of rod prices of length i, where 1 <= i <= n, find the optimal way to cut the rod into smaller rods to maximize profit.

Example: 


Input:

length[] = [1, 2, 3, 4, 5, 6, 7, 8]
price[] = [1, 5, 8, 9, 10, 17, 17, 20]

Rod length: 4


Best: Cut the rod into two pieces of length 2 each to gain revenue of 5 + 5 = 10

CutProfit
49
1, 3(1 + 8) = 9
2, 2(5 + 5) = 10
3, 1(8 + 1) = 9
1, 1, 2(1 + 1 + 5) = 7
1, 2, 1(1 + 5 + 1) = 7
2, 1, 1(5 + 1 + 1) = 7
1, 1, 1, 1(1 + 1 + 1 + 1) = 4


Approach-1: 

We are given an array price[], where the rod of length i has a value price[i-1]. The idea is simple  one by one, partition the given rod of length n into two parts: i and n-i. Recur for the rod of length n-i but dont divide the rod of length i any further. Finally, take the maximum of all values. This yields the following recursive relation:
rodcut(n) = max { price[i  1] + rodCut(n  i) } where 1 <= i <= n


Approach 2


We have seen that the problem can be broken down into smaller subproblems, which can further be broken down into yet smaller subproblems, and so on. So, the problem has optimal substructure. Lets consider a recursion tree for the rod of length 4.