Given a positive number n, find the previous power of 2. If n itself is a power of 2, return n.

Example: 


Input: n = 20
Output: 16

Input: n = 16
Output: 16


Approach-1: 

Approach 1The idea is to unset the rightmost bit of n until only one bit is left, which will be the last set bit of the given number and a previous power of 2. This approach is demonstrated below in C++, Java, and Python:

Approach 2

The idea is to run a loop by initializing the result by 1. We double the result value at each iteration of the loop and divide n in half and continue the loop till n becomes 0.

Approach 3

The idea is to calculate the position p of the last set bit of n and return a number with its p'th bit set. In other words, drop all set bits from n except its last set bit.

Approach 4

The idea is to set all bits on the right-hand side of the most significant set bit to 1 and then drop all but the last set bit from n so that it becomes equal to the previous power of two. For instance, consider number 20. We convert its binary representation 00010100 to 00011111. Then drop all set bits except the last one to become 00010000, which is equal to 16 (the previous power of 20).