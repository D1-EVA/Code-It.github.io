b'1096. Brace Expansion IIHard373235Add to ListShareUnder the grammar given below, strings can represent a set of lowercase words. Let\xc2\xa0R(expr)\xc2\xa0denote the set of words the expression represents.
The grammar can best be understood through simple examples:

Single letters represent a singleton set containing that word.
\t
R("a") = {"a"}
R("w") = {"w"}


When we take a comma-delimited list of two or more expressions, we take the union of possibilities.
\t
R("{a,b,c}") = {"a","b","c"}
R("{{a,b},{b,c}}") = {"a","b","c"} (notice the final set only contains each word at most once)


When we concatenate two expressions, we take the set of possible concatenations between two words where the first word comes from the first expression and the second word comes from the second expression.
\t
R("{a,b}{c,d}") = {"ac","ad","bc","bd"}
R("a{b,c}{d,e}f{g,h}") = {"abdfg", "abdfh", "abefg", "abefh", "acdfg", "acdfh", "acefg", "acefh"}



Formally, the three rules for our grammar:

For every lowercase letter x, we have R(x) = {x}.
For expressions e1, e2, ... , ek with k >= 2, we have R({e1, e2, ...}) = R(e1) \xe2\x88\xaa R(e2) \xe2\x88\xaa ...
For expressions e1 and e2, we have R(e1 + e2) = {a + b for (a, b) in R(e1) \xc3\x97 R(e2)}, where + denotes concatenation, and \xc3\x97 denotes the cartesian product.

Given an expression representing a set of words under the given grammar, return the sorted list of words that the expression represents.
\xc2\xa0
Example 1:
Input: expression = "{a,b}{c,{d,e}}"
Output: ["ac","ad","ae","bc","bd","be"]

Example 2:
Input: expression = "{{a,z},a{b,c},{ab,z}}"
Output: ["a","ab","ac","z"]
Explanation: Each distinct word is written only once in the final answer.

\xc2\xa0
Constraints:

1 <= expression.length <= 60
expression[i] consists of \'{\', \'}\', \',\'or lowercase English letters.
The given\xc2\xa0expression\xc2\xa0represents a set of words based on the grammar given in the description.

Accepted19.4KSubmissions30.9KSeen this question in a real interview before?YesNoCompaniesRelated TopicsStringBacktrackingStackBreadth-First SearchSimilar QuestionsBrace ExpansionMediumShow Hint 1You can write helper methods to parse the next "chunk" of the expression.  If you see eg. "a", the answer is just the set {a}.  If you see "{", you parse until you complete the "}" (the number of { and } seen are equal) and that becomes a chunk that you find where the appropriate commas are, and parse each individual expression between the commas.'
